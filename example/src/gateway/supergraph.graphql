schema
  @core(feature: "https://specs.apollo.dev/core/v0.1"),
  @core(feature: "https://specs.apollo.dev/join/v0.1")
{
  query: Query
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

type Astronaut
  @join__owner(graph: ASTRONAUTS)
  @join__type(graph: ASTRONAUTS, key: "id")
  @join__type(graph: MISSIONS, key: "id")
{
  id: ID! @join__field(graph: ASTRONAUTS)
  missions: [Mission] @join__field(graph: MISSIONS)
  name: String @join__field(graph: ASTRONAUTS)
}

type AstronautConnection {
  edges: [AstronautEdge]
}

type AstronautEdge {
  node: Astronaut
}

enum CasingType {
  LOWER
  UPPER
}

"""An ISO 8601-encoded UTC date string."""
scalar DateTime

scalar join__FieldSet

enum join__Graph {
  ASTRONAUTS @join__graph(name: "astronauts" url: "http://localhost:4001/")
  MISSIONS @join__graph(name: "missions" url: "http://localhost:4002")
  VEHICLES @join__graph(name: "vehicles" url: "http://localhost:4003/")
}

type Mission {
  crew: [Astronaut]
  designation: String!
  endDate: DateTime
  id: ID!
  startDate: DateTime
  vehicle: Vehicle!
}

input MissionFilter {
  type: MissionType!
  year: String
}

enum MissionType {
  ACCIDENT
  CREWED_EARTH_ORBITING
  LUNAR_LANDING
  LUNAR_ORBITING
  UNCREWED_EARTH_ORBITING
}

type Query {
  astronaut(id: ID!): Astronaut @join__field(graph: ASTRONAUTS)
  astronauts(first: Int = 5): AstronautConnection @join__field(graph: ASTRONAUTS)
  mission(id: ID!): Mission @join__field(graph: MISSIONS)
  missions(filter: MissionFilter): [Mission] @join__field(graph: MISSIONS)
  vehicle(id: ID!): Vehicle @join__field(graph: VEHICLES)
  vehicles: [Vehicle] @join__field(graph: VEHICLES)
}

type Vehicle
  @join__owner(graph: VEHICLES)
  @join__type(graph: VEHICLES, key: "id")
  @join__type(graph: MISSIONS, key: "id")
{
  id: ID! @join__field(graph: VEHICLES)
  model: String @join__field(graph: VEHICLES)
}